services:
  api-gateway-api:
    build:
      context: ../apps/api/api-gateway
      dockerfile: ../../../docker/Dockerfile.api
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@main-db:5432/main
      REDIS_HOST: redis
      NATS_URL: nats://nats:4222
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gateway.rule=Host(`api.enchere.mdlh.fr`)"
      - "traefik.http.routers.gateway.entrypoints=websecure"
      - "traefik.http.routers.gateway.tls.certresolver=myresolver"
      - "traefik.http.services.gateway.loadbalancer.server.port=8000"
    depends_on:
      - main-db
      - redis
      - nats

  auction-api:
    build:
      context: ../apps/api/auction-service
      dockerfile: ../../../docker/Dockerfile.api
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@main-db:5432/main
      REDIS_HOST: redis
      NATS_URL: nats://nats:4222
    depends_on:
      - main-db
      - redis
      - nats

  product-api:
    build:
      context: ../apps/api/product-service
      dockerfile: ../../../docker/Dockerfile.api
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@main-db:5432/main
      REDIS_HOST: redis
      NATS_URL: nats://nats:4222
    depends_on:
      - main-db
      - redis
      - nats

  web:
    build:
      context: ../apps/web/enchere-et-en-os
      dockerfile: ../../../docker/Dockerfile.web
    environment:
      NEXT_PUBLIC_API_GATEWAY_URL: https://api.enchere.mdlh.fr
      NEXT_PUBLIC_KEYCLOAK_URL: https://auth.enchere.mdlh.fr/
      NEXT_PUBLIC_KEYCLOAK_REALM: enchere
      NEXT_PUBLIC_KEYCLOAK_CLIENT_ID: front
      NEXT_PUBLIC_KEYCLOAK_REDIRECT_URI: https://enchere.mdlh.fr/
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`enchere.mdlh.fr`)"
      - "traefik.http.routers.web.entrypoints=websecure"
      - "traefik.http.routers.web.tls.certresolver=myresolver"
      - "traefik.http.services.web.loadbalancer.server.port=3000"
    depends_on:
      - api-gateway-api

  keycloak:
    image: quay.io/keycloak/keycloak:26.2.1
    command:
      - start
      - --hostname=https://auth.enchere.mdlh.fr
      - --hostname-admin-url=https://auth.enchere.mdlh.fr
      - --import-realm
      - --proxy=edge
    environment:
        KC_BOOTSTRAP_ADMIN_USERNAME: ${KEYCLOAK_ADMIN}
        KC_BOOTSTRAP_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
        KC_DB: postgres
        KC_DB_URL: jdbc:postgresql://keycloak-db:5433/keycloak
        KC_DB_USERNAME: ${POSTGRES_USER}
        KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.keycloak.rule=Host(`auth.enchere.mdlh.fr`)"
      - "traefik.http.routers.keycloak.entrypoints=websecure"
      - "traefik.http.routers.keycloak.tls.certresolver=myresolver"
      - "traefik.http.services.keycloak.loadbalancer.server.port=8080"
    volumes:
      - ./realm-export.json:/opt/keycloak/data/import/realm-export.json
    depends_on:
      - keycloak-db

  keycloak-db:
    image: postgres:17.5
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - keycloak-data:/var/lib/postgresql/data
    ports:
      - "5433:5433"

  main-db:
    image: postgres:17.5
    environment:
      POSTGRES_DB: main
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - main-db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  redis:
    image: redis:7

  nats:
    image: nats:2.10
    ports:
      - "4222:4222"
      - "8222:8222"

  traefik:
    image: traefik:v3.0
    command:
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--providers.docker=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=admin@enchere.mdlh.fr"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--api.dashboard=true"
    ports:
      - "80:80"
      - "443:443"
      - "8081:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./letsencrypt:/letsencrypt

volumes:
  main-db-data:
  keycloak-data: